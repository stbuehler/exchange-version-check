#!/usr/bin/env python3

# Copyright (c) 2022 Stefan BÃ¼hler
# License: MIT (https://en.wikipedia.org/wiki/MIT_License)
# Upstream: https://github.com/stbuehler/exchange-version-check

from __future__ import annotations

import argparse
import dataclasses
import datetime
import json
import os.path
import re
import sys
import typing

import requests
import urllib3
import yaml


# if we disable TLS certificate verification explicitly we don't want f***ing warnings.
urllib3.disable_warnings()


DEFAULT_MS_RELEASES_SOURCE = 'https://docs.microsoft.com/en-us/exchange/new-features/build-numbers-and-release-dates'
DEFAULT_MS_SUPPORTED_CU_SOURCE = 'https://learn.microsoft.com/en-us/exchange/plan-and-deploy/supportability-matrix'
DEFAULT_ALIVE_SOURCE = 'https://stbuehler.github.io/exchange-version-check/alive.json'


class HtmlRow:
	def __init__(self, html: str) -> None:
		self.html = html

	def __iter__(self) -> typing.Iterator[str]:
		return iter(re.findall(r'<td(?:\s[^>]*)?>(.*?)</td>', self.html, re.DOTALL|re.IGNORECASE))


class HtmlTable:
	def __init__(self, html: str, *, skip_head_rows: int = 1) -> None:
		self.html = html
		self.skip_head_rows = skip_head_rows

	def __iter__(self) -> typing.Iterator[HtmlRow]:
		rows = re.findall(r'<tr(?:\s[^>]*)?>(.*?)</tr>', self.html, re.DOTALL|re.IGNORECASE)
		rows = rows[self.skip_head_rows:]  # skip header
		for row in rows:
			yield HtmlRow(html=row)

	@staticmethod
	def find_first(html: str) -> HtmlTable:
		table = re.search(r'<table(?:\s[^>]*)?>(.*?)</table>', html, re.DOTALL|re.IGNORECASE)
		if table is None:
			return ValueError("No <table> found")
		return HtmlTable(html=table.group(1))

	@staticmethod
	def find_all(html: str) -> typing.Iterator[HtmlTable]:
		tables = re.findall(r'<table(?:\s[^>]*)?>(.*?)</table>', html, re.DOTALL|re.IGNORECASE)
		for table in tables:
			yield HtmlTable(html=table)


_MATCH_HTML_LINK = re.compile(r'<a(?:\s+(?:href="(.*)"|\S+))*>(.*)</a>', re.DOTALL|re.IGNORECASE)
# support simple links
def from_html(orig_html: str) -> typing.Tuple[str, typing.Optional[str]]:
	plain = ''
	html = ''
	while True:
		m = _MATCH_HTML_LINK.search(orig_html)
		if not m:
			plain += orig_html
			html += orig_html
			break
		pre = orig_html[:m.start(0)]
		plain += pre
		html += pre
		orig_html = orig_html[m.end(0):]
		#
		plain += m[2]
		html += f'<a href="{m[1]}">{m[2]}</a>'
	if plain == html:
		return (plain, None)
	return (plain, html)


@dataclasses.dataclass
class Version:
	name: str
	short_code: str
	date: typing.Optional[datetime.date]
	date_str: typing.Optional[str]
	html_name: typing.Optional[str]
	tree: typing.Optional['Tree'] = dataclasses.field(default=None, repr=False)

	_SPLIT_TITLE = re.compile(r'^\[(.+)\]\((.+)\)$')
	_FIX_DATE_WS = re.compile(r'([a-zA-Z])([0-9])')

	@property
	def date_string(self) -> str:
		if not self.date_str is None:
			return self.date_str
		assert self.date
		return self.date.strftime('%Y-%m-%d')

	@property
	def num_code(self) -> typing.Sequence[int]:
		return tuple(int(p) for p in self.short_code.split('.'))

	@staticmethod
	def _parse_date(col: str) -> typing.Tuple[typing.Optional[str], typing.Optional[datetime.date]]:
		# May25 -> May 25
		col = Version._FIX_DATE_WS.sub(r'\1 \2', col.strip())
		try:
			# Month day, Year
			date = datetime.datetime.strptime(col, '%B %d, %Y')
			return (None, date.date())
		except ValueError: pass
		try:
			# Month, Year
			date = datetime.datetime.strptime(col, '%B, %Y')
			return (date.strftime('%Y-%m'), date.date())
		except ValueError: pass
		try:
			# Month Year
			date = datetime.datetime.strptime(col, '%B %Y')
			return (date.strftime('%Y-%m'), date.date())
		except ValueError: pass
		return (f'Unknown: {col}', None)

	@staticmethod
	def parse_table_row(row: HtmlRow) -> typing.Optional['Version']:
		cols = list(row)
		assert len(cols) >= 3, f"Unexpected table row: {row!r}"
		if not cols[0] and not cols[1] and not cols[2]:
			return None
		name, html_name = from_html(cols[0].strip())
		date_str, date = Version._parse_date(cols[1])
		# remove leading zeroes at the beginning and after each '.'
		short_code = re.sub(r'(^|\.)0+(\d)', r'\1\2', cols[2])
		return Version(
			name=name,
			short_code=short_code,
			date=date,
			date_str=date_str,
			html_name=html_name,
		)

	@staticmethod
	def scan(input: str):
		for table in HtmlTable.find_all(input):
			if not '<th>Product name</th>' in table.html:
				continue
			for row in table:
				version = Version.parse_table_row(row)
				if version:
					yield version

	def to_yaml(dumper: yaml.Dumper, data: 'Version'):
		state = {
			key: value
			for key, value in data.__dict__.items()
			if value
		}
		if data.date_str:
			# if we have date_str then date is not an exact representation
			state.pop('date', None)
		state.pop('tree', None)  # avoid cyclic links
		return dumper.represent_mapping('tag:yaml.org,2002:map', state.items())
yaml.Dumper.add_representer(Version, Version.to_yaml)


@dataclasses.dataclass
class Tree(yaml.YAMLObject):
	path: typing.Sequence[int]
	name: str
	html_name: typing.Optional[str]
	version: typing.Optional[Version]
	children: typing.List['Tree']
	latest_release: typing.Optional[datetime.date] = None
	latest_release_str: typing.Optional[str] = None
	alive: typing.Optional[bool] = None
	parent: typing.Optional['Tree'] = None

	_TOTAL_MAX_AGE = datetime.timedelta(days=180)
	_COMPARE_MAX_AGE = datetime.timedelta(days=15)

	@property
	def short_code_wild(self) -> str:
		if not self.path: return '*'
		if self.version:
			return self.version.short_code
		return '.'.join(map(str, self.path)) + '.*'

	@property
	def latest_release_string(self) -> typing.Optional[str]:
		if not self.latest_release_str is None:
			return self.latest_release_str
		if self.latest_release:
			return self.latest_release.strftime('%Y-%m-%d')
		return None

	@property
	def real_name(self) -> str:
		"""
		In the yaml export only nodes without a version get a name.
		This returns the name of either the version or the node.
		"""
		return self.version.name if self.version else self.name

	def latest_child(self) -> Tree | None:
		if not self.children:
			return None
		return max(self.children, key=lambda t: t.path)

	def latest(self) -> typing.Optional['Version']:
		l = self.latest_child()
		if l:
			return l.latest() or self.version
		return self.version

	def _is_flat_version(self):
		return self.version and 0 == len(self.children)

	def calc_alive_heuristic(self, parent_alive: bool=True, parent_latest_release: typing.Optional[datetime.date]=None) -> None:
		alive = bool(
			parent_alive and
			self.latest_release and
			(datetime.date.today() - self.latest_release) < Tree._TOTAL_MAX_AGE
		)
		if self.version and alive:
			assert self.latest_release
			if parent_latest_release and (parent_latest_release - self.latest_release) > Tree._COMPARE_MAX_AGE:
				# major versions / CU branches are considered dead if they didn't get an update in the same time window as the others.
				alive = False
			elif not self.children and parent_latest_release and parent_latest_release > self.latest_release:
				# between "leaf version" ("SU" updates) always require the latest version
				alive = False
		self.alive = alive
		for node in self.children:
			node.calc_alive_heuristic(alive, self.latest_release)

	def _fix_tree(self) -> None:
		guess_name = True
		calc_release_date = True
		release_dates: typing.List[typing.Tuple[datetime.date, typing.Optional[str]]] = []
		if self.version and self.version.date:
			release_dates.append((self.version.date, self.version.date_str))
		for node in self.children:
			node._fix_tree()
			if calc_release_date:
				if node.latest_release:
					release_dates.append((node.latest_release, node.latest_release_str))
				else:
					calc_release_date = False
			if not node._is_flat_version():
				guess_name = False
		if guess_name and (not self.name) and (not self.version) and len(self.children):
			common_name = os.path.commonprefix(
				[child.version.name for child in self.children]
			).strip()
			if common_name.startswith(self.parent.name):
				self.name = common_name
			else:
				self.name = self.children[-1].version.name
				self.html_name = self.children[-1].version.html_name
		if calc_release_date and len(release_dates):
			d, d_str = max(release_dates)
			self.latest_release = d.replace()  # clone date
			self.latest_release_str = d_str

	def html_table(self, out, *, nested: int=0) -> None:
		if self.alive:
			dead_color_cls = ''
		else:
			dead_color_cls = ' class="text-danger"'
		if self.alive:
			dead_collapse_cls = ''
		else:
			dead_collapse_cls = ' class="version-dead"'
		indent = f'style="padding-left: {2*nested}em;"'
		skip = False
		if self.version:
			name = self.version.html_name or self.version.name
			code = self.version.short_code
			date: typing.Optional[str] = self.version.date_string
		elif self.name:
			name = self.html_name or self.name
			code = self.short_code_wild
			date = self.latest_release_string
		else:
			skip = True
		if not skip:
			out.write(f'<tr{dead_collapse_cls}><td {indent}>{name}</td><td{dead_color_cls}>{code}</td><td{dead_color_cls}>{date}</td></tr>\n')
		for node in self.children:
			node.html_table(nested=nested+1, out=out)

	def gather_alive_versions(self) -> typing.Iterator[Version]:
		if self.alive and self.version:
			yield self.version
		for node in self.children:
			for v in node.gather_alive_versions():
				yield v

	def to_yaml(dumper: yaml.Dumper, data: 'Tree'):
		state = {
			key: value
			for key, value in data.__dict__.items()
			if value and not key in ('path',)
		}
		if data.latest_release_str:
			# if we have a string the date isn't exact
			state.pop('latest_release', None)
		state.pop('parent', None)  # avoid cyclic links
		return dumper.represent_mapping('tag:yaml.org,2002:map', state.items())
yaml.Dumper.add_representer(Tree, Tree.to_yaml)


@dataclasses.dataclass
class TreeBuilder(yaml.YAMLObject):
	path: typing.Sequence[int]
	name: str = ''
	html_name: typing.Optional[str] = ''
	version: typing.Optional[Version] = None
	children: typing.Dict[int, 'TreeBuilder'] = dataclasses.field(default_factory=dict)
	is_root: bool = False

	def _subnode(self, key: int) -> 'TreeBuilder':
		node = self.children.get(key, None)
		if node is None:
			node = TreeBuilder(path=tuple(self.path) + (key,))
			self.children[key] = node
		return node

	def _insert_root(self, path: typing.Sequence[int], name: str) -> TreeBuilder:
		if len(path) == 0:
			self.name = name
			self.is_root = True
			return self
		key = path[0]
		path = path[1:]
		return self._subnode(key)._insert_root(path, name)

	def _insert(self, path: typing.Sequence[int], version: Version, *, found_root: bool = False):
		if len(path) == 0:
			assert found_root, f'Version inserted above roots'
			assert self.version is None, f'Version already in tree: {version} ({self.version})'
			self.version = version
			return
		found_root = found_root or self.is_root
		key = path[0]
		path = path[1:]
		self._subnode(key)._insert(path, version, found_root=found_root)

	def _build_root_trees(self) -> typing.Iterable[Tree]:
		if self.is_root:
			yield self._build_tree()
		for key, node in sorted(self.children.items(), reverse=True):
			yield from node._build_root_trees()

	def _build_tree(self, parent: Tree | None = None) -> Tree:
		children = []
		tree = Tree(
			path=self.path,
			name=self.name,
			html_name=self.html_name,
			version=self.version,
			children=children,
			parent=parent,
		)
		if self.version:
			self.version.tree = tree
		for _key, node in sorted(self.children.items(), reverse=True):
			children.append(node._build_tree(parent=tree))

		tree._fix_tree()
		return tree

	@staticmethod
	def from_versions(versions: typing.Iterable[Version]) -> 'Tree':
		root = TreeBuilder(path=())
		for (path, name) in (
			((15, 2), 'Exchange Server 2019'),
			((15, 1), 'Exchange Server 2016'),
			((15, 0), 'Exchange Server 2013'),
			((14,), 'Exchange Server 2010'),
			((8,), 'Exchange Server 2007'),
			((6, 5), 'Exchange Server 2003'),
			((6, 0), 'Exchange 2000 Server'),
			((5, 5), 'Exchange Server 5.5'),
			((5, 0), 'Exchange Server 5.0'),
			((4, 0), 'Exchange Server 4.0'),
		):
			root._insert_root(path, name)
		for version in versions:
			root._insert(version.num_code, version)
		children = list(root._build_root_trees())
		root = Tree(path=(), name='', html_name=None, version=None, children=children)
		for c in children:
			c.parent = root
		return root


def parse_supported_cu_versions(args: argparse.Namespace) -> dict[str, list[str]]:
	ms_release_list = requests.get(args.supported_cu_source)
	versions = {}

	parts = iter(re.split(r'(<h2\s.*?>)', ms_release_list.content.decode('utf-8')))
	next(parts)
	while True:
		try:
			head = next(parts)
		except StopIteration:
			return versions
		body = next(parts)
		if 'supported-versions-and-builds' in head:
			break

	def clean_html(html: str) -> str:
		html = re.sub('<\s*br\s*/?>', '\n', html)
		html = re.sub(r'[ \t]*(?:<.*?>)+[ \t]*', ' ', html)
		return html.strip()

	table = HtmlTable.find_first(body)
	for row in table:
		cells = [clean_html(s) for s in row]
		exch_version = cells[0]
		supported_cus = re.findall(r'\bCU\d+\b', cells[1])
		versions[exch_version] = supported_cus
	return versions


@dataclasses.dataclass
class Trees:
	trees: typing.List[Tree]
	versions: typing.Dict[str, Version]

	def alive_versions(self) -> typing.List[str]:
		return [
			v.short_code
			for tree in self.trees
			for v in tree.gather_alive_versions()
		]

	def html_table(self, out) -> None:
		for tree in self.trees:
			tree.html_table(out)

	def calc_alive_heuristic(self) -> None:
		for tree in self.trees:
			tree.calc_alive_heuristic()

	def calc_alive_supported_cus(self, supported_cus: dict[str, list[str]]) -> None:
		by_version = { tree.real_name: tree for tree in self.trees }
		for vers_name, cus in supported_cus.items():
			version = by_version.get(vers_name)
			if version is None:
				pass
			version.alive = True
			for cu in cus:
				for subversion in version.children:
					if cu in subversion.real_name:
						while subversion:
							subversion.alive = True
							subversion = subversion.latest_child()

	@staticmethod
	def load(args: argparse.Namespace) -> 'Trees':
		supported_cus = parse_supported_cu_versions(args)

		ms_release_list = requests.get(args.source)
		# assume content is utf-8 (html meta), although not specified in http content-type:
		versions = list(Version.scan(ms_release_list.content.decode('utf-8')))

		root = TreeBuilder.from_versions(versions)
		trees = Trees(trees=root.children, versions={v.short_code: v for v in versions})
		if supported_cus:
			trees.calc_alive_supported_cus(supported_cus)
		else:
			# fallback to heuristic if we couldn't parse the supported CU versions
			trees.calc_alive_heuristic()
		return trees


def run_pages(args: argparse.Namespace):
	trees = Trees.load(args)

	with open('versions.yaml', mode='w') as f:
		yaml.dump(trees.trees, stream=f)

	with open('versions.html', mode='w') as f:
		f.write("""<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<title>Exchange versions</title>
		<style>
			.collapse-dead .version-dead {
				display: none;
			}
		</style>
	</head>
	<body><div class="container-fluid">
		<h1>Exchange versions</h1>
		<button class="btn btn-primary mb-2" type="button" id="toggle-dead">Toggle old versions</button>
		Also see <a href="https://github.com/stbuehler/exchange-version-check">project on github</a>.
		<table class="table table-striped table-responsive" id="vt">
			<thead class="thead-dark"><tr><th scope="col">Name</th><th scope="col">Version</th><th scope="col">Latest Release</th></tr></thead>
""")
		trees.html_table(f)
		f.write("""		</table>
	<script>
		document.getElementById("toggle-dead").addEventListener("click", (event) => {
			document.getElementById("vt").classList.toggle("collapse-dead");
		});
	</script>
	</div></body>
</html>
""")

	with open('alive.json', mode='w') as f:
		json.dump(trees.alive_versions(), f)


def run_check(args: argparse.Namespace):
	try:
		if args.cached_alive:
			trees: typing.Optional[Trees] = []
			alive_versions: typing.List[str] = requests.get(args.alive_source).json()
		else:
			trees = Trees.load(args)
			alive_versions = trees.alive_versions()
	except Exception as e:
		print("UNKNOWN: Couldn't retrieve acceptable exchange server versions|")
		print(e)
		sys.exit(3)
	proto = args.http and 'http' or 'https'
	url = f'{proto}://{args.host}/AutoDiscover/AutoDiscover.xml'
	try:
		resp = requests.get(url, allow_redirects=True, verify=not args.no_verify)
	except Exception as e:
		print("UNKNOWN: Couldn't find exchange server version|")
		print(e)
		sys.exit(3)
	owa_version = resp.headers.get('X-OWA-Version', None)
	if owa_version is None:
		print(f"UNKNOWN: Missing X-OWA-Version response header for {url}|")
		sys.exit(3)
	# TODO: support other variants for finding the version
	# - XML at http[s]://host/ecp/Current/exporttool/microsoft.exchange.ediscovery.exporttool.application
	#   (<asmv1:assembly><assemblyIdentity version="...">)
	# - Login page at /owa/auth/logon.aspx contains various "/owa/auth/A.B.C/..." references (but misses .D patch level)
	# - https://www.msxfaq.de/exchange/update/exchange_build_nummer_ermitteln.htm
	if trees:
		version = trees.versions.get(owa_version, None)
		version_name = version and version.name or 'Unknown exchange version'
	else:
		version_name = 'Version names not loaded'
	rc: int
	if owa_version in alive_versions:
		print(f"OK: Version {owa_version} is fine ({version_name})|")
		rc = 0
	else:
		print(f"CRITICAL: Version {owa_version} is outdated ({version_name})|")
		rc = 2
	if version and version.tree:
		update_targets: list[str] = []
		p = version.tree.parent
		previos_to = None
		while p:
			to = p.latest()
			if to != version and to != previos_to:
				update_targets.append(f"- {to.short_code} ({to.name})")
			p = p.parent
			previos_to = to
		if update_targets:
			print("Update targets:")
			for t in update_targets:
				print(t)
		else:
			print("This is the latest release.")
	else:
		print(f"Acceptable versions: {', '.join(alive_versions)}")
	print("Also see:")
	print(f"* {DEFAULT_MS_RELEASES_SOURCE}")
	print(f"* {DEFAULT_MS_SUPPORTED_CU_SOURCE}")
	sys.exit(rc)


def parser_add_help(parser: argparse.ArgumentParser):
	# don't support "-h", but support "-?"
	parser.add_argument(
		'-?', '--help',
		action='help', default=argparse.SUPPRESS,
		help='show this help message and exit',
	)


def main():
	# MS killed https://github.com/MicrosoftDocs/OfficeDocs-Exchange, so now we have to parse html
	parser = argparse.ArgumentParser('check_stbuehler_exchange_version', add_help=False)
	parser_add_help(parser)

	subs = parser.add_subparsers(dest='command', required=True)

	pages = subs.add_parser('pages', help='Generate machine and human readable files', add_help=False)
	parser_add_help(pages)
	pages.add_argument('--source', default=DEFAULT_MS_RELEASES_SOURCE)
	pages.add_argument('--supported-cu-source', default=DEFAULT_MS_SUPPORTED_CU_SOURCE)

	check = subs.add_parser('check', help='Default subcommand: check an exchange server version', add_help=False)
	parser_add_help(check)
	check.add_argument('--source', default=DEFAULT_MS_RELEASES_SOURCE)
	check.add_argument('--supported-cu-source', default=DEFAULT_MS_SUPPORTED_CU_SOURCE)
	check.add_argument('-c', '--cached-alive', action='store_true', help='Use cached alive versions')
	check.add_argument('--alive-source', default=DEFAULT_ALIVE_SOURCE)
	check.add_argument('-h', '--host', required=True, help='Exchange host to check')
	check.add_argument('--http', action='store_true', help='Use http request')
	check.add_argument('--no-verify', action='store_true', help="Don't verify TLS certificate")

	argv = sys.argv[1:]
	if len(argv) > 0 and not argv[0] in ('--help', '-?', 'check', 'pages'):
		# default command
		argv.insert(0, 'check')

	args = parser.parse_args(argv)

	if args.command == 'pages':
		run_pages(args)
	elif args.command == 'check':
		run_check(args)
	else:
		assert False, f'Unknown command: {args.command!r} '


if __name__ == '__main__':
	main()
